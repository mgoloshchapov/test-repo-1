"""
--------------------------------------------------------------------
Описание: Двоичная куча (Binary min heap)

По сути является очередью с приоритетом

Первым кучу покидает элемент с наибольшим приоритетом

В данном случае считается, что наибольший приоритет имеет минимальный
элемент

Для элемента с индексом i предок хранится в (i - 1) // 2, потомки
хранятся в (2 * i + 1) и (2 * i + 2) соотвественно

Свойство кучи: предок меньше потомка

Куча хранится в динамическом массиве, при этом поддерживается свойство
кучи
--------------------------------------------------------------------
Реализация

Введены функции sift_up, sift_down, которые являются вспомогательными
функциями для add, extract_min

sift_up совершает просеивание вверх, т.е. выбранный элемент сравнивается с
своим предком и меняется с ним местами, пока не будет выполнено свойство кучи

sift_down аналогичен sift_up, но нужен для extract_min, при котором удаляется
минимальный элемент кучи, т.е. голова
"""


def sift_up(heap, i):
    while i > 0 and heap[(i - 1) // 2] > heap[i]:
        heap[i], heap[(i - 1) // 2] = heap[(i - 1) // 2], heap[i]
        i = (i - 1) // 2


def sift_down(heap, i):
    n = len(heap)
    while i * 2 + 1 < n:
        j = i
        if heap[i] > heap[i * 2 + 1]:
            j = i * 2 + 1
        if i * 2 + 2 < n and heap[j] > heap[i * 2 + 2]:
            j = i * 2 + 2
        if i == j:
            break
        heap[i], heap[j] = heap[j], heap[i]


def add(heap, x):
    heap.append(x)
    sift_up(heap, len(heap) - 1)


def extract_min(heap):
    x = heap[0]
    heap[0] = heap.pop()
    sift_down(heap, 0)
    return x
